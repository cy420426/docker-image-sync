name: 定期更新 ghcr.io 镜像

on:
  schedule:
    - cron: "0 8 * * *"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装依赖
        run: sudo apt-get install -y jq skopeo

      - name: 提取源镜像列表
        id: extract-images
        run: |
          awk -F '|' '
          /^### 已同步 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              # 提取 pull 命令列（第4列）
              gsub(/^[ \t]+|[ \t]+$/, "", $4);
              gsub(/`/, "", $4);
              print $4
          }
          /^### 部分镜像 docker run 命令/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' | 
          # 提取镜像名称（去除域名和标签）
          sed 's|^docker pull ghcr.nju.edu.cn/sqing33/||' | 
          sed 's/:[^:]*$//' > image-list.txt

      - name: 登录到 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理已删除的镜像条目
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          # 生成需要保留的镜像列表
          touch keep-images.txt
          while IFS= read -r image; do
            image_name=$(basename "$image")
            target_image="ghcr.io/$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')/$image_name"
            if skopeo inspect "docker://$target_image:latest" >/dev/null 2>&1; then
              echo "$image" >> keep-images.txt
            else
              echo "镜像 $image 不存在于ghcr.io，标记为删除"
              # 记录需要删除的镜像名称（用于处理README）
              echo "$image" >> deleted-images.txt
            fi
          done < image-list.txt

          # 仅在文件存在时输出内容（避免报错）
          if [ -f "deleted-images.txt" ]; then
            echo "以下镜像将被清理："
            cat deleted-images.txt
          fi

          # 更新镜像列表为仅保留存在的镜像
          mv keep-images.txt image-list.txt

          # 如果存在需要删除的条目，更新README.md
          if [ -f deleted-images.txt ]; then
            echo "开始清理README中的无效条目..."
            while IFS= read -r del_image; do
              # 使用竖线作为分隔符，并允许列前后有空格
              escaped_del_image=$(printf '%s\n' "$del_image" | sed 's/[]\[\*\^$.\/?+(){}|]/\\&/g')
              sed -i "/| *[0-9]\+ *| *$escaped_del_image *|/d" README.md
            done < deleted-images.txt

            # 重新编号并修复表格格式（保持原有代码不变）
            awk -F '|' '
              BEGIN { count=0 }
              /^### 已同步 Docker 镜像/ { 
                print
                count=0
                next
              }
              /^\| *----/ { print; next }
              /^\| *[0-9]+/ {
                count++
                spaces_before = match($2, /^ */) ? substr($2, 1, RLENGTH) : ""
                spaces_after = match($2, / *$/) ? substr($2, RSTART) : ""
                $2 = sprintf("%s%d%s", spaces_before, count, spaces_after)
                printf "|%s", $2
                for (i=3; i<=NF; i++) printf "|%s", $i
                print ""
                next
              }
              { print }
            ' README.md > README.tmp && mv README.tmp README.md

            # 提交更改（保持原有代码不变）
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git add README.md
            git commit -m "自动清理已删除的镜像条目" || echo "无变更可提交"
            git push origin main
          fi

      - name: 同步所有架构镜像更新
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          echo "===== 同步镜像列表 ====="
          cat image-list.txt
          echo "===================="

          while IFS= read -r source_image; do
            echo "处理镜像: $source_image"
            source_image_full="docker://$( [[ "$source_image" == *"/"* ]] && echo "$source_image" || echo "library/$source_image" ):latest"
            image_name=$(basename "$source_image")
            target_image_base="ghcr.io/$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')/$image_name"
            need_update=false

            # 获取源镜像清单列表
            source_manifest=$(skopeo inspect --raw "$source_image_full")
            source_digest=$(echo "$source_manifest" | jq -r '.digest')

            # 检查目标镜像是否存在
            if target_manifest=$(skopeo inspect --raw "docker://$target_image_base:latest" 2>/dev/null); then
              target_digest=$(echo "$target_manifest" | jq -r '.digest')
            else
              target_digest=""
            fi

            # 比较清单 digest
            if [ "$source_digest" != "$target_digest" ]; then
              echo "检测到清单更新，开始全架构同步..."
              need_update=true
            else
              echo "清单未更新，跳过同步"
              continue
            fi

            # 获取所有支持的架构
            if echo "$source_manifest" | jq -e '.manifests' > /dev/null 2>&1; then
              ARCHS=$(echo "$source_manifest" | jq -r '.manifests[].platform.architecture' | sort -u | grep -E 'amd64|arm64|arm|386|ppc64le|s390x|mips64le')
            else
              ARCH=$(echo "$source_manifest" | jq -r '.architecture')
              ARCHS=$( [[ "$ARCH" =~ ^(amd64|arm64|arm|386|ppc64le|s390x|mips64le)$ ]] && echo "$ARCH" || echo "")
            fi

            if [ -z "$ARCHS" ]; then
              echo "❌ 未找到支持的架构，使用默认架构 amd64"
              ARCHS="amd64"
            fi

            # 同步各架构镜像
            for arch in $ARCHS; do
              echo "▸ 处理架构: $arch"
              target_tag="$target_image_base:latest-$arch"
              
              # 获取架构特定 digest
              arch_digest=$(echo "$source_manifest" | jq -r \
                '.manifests[] | select(.platform.architecture == "'$arch'").digest')

              # 拉取并推送架构镜像
              docker pull --platform "linux/$arch" "$(echo "$source_image_full" | sed 's|docker://||')@$arch_digest"
              docker tag "$(echo "$source_image_full" | sed 's|docker://||')@$arch_digest" "$target_tag"
              docker push "$target_tag"
            done

            # 更新 manifest 列表
            echo "🔄 重建多架构manifest列表..."
            docker manifest rm "$target_image_base:latest" 2>/dev/null || true
            amend_args=()
            for arch in $ARCHS; do
              amend_args+=(--amend "$target_image_base:latest-$arch")
            done
            docker manifest create "$target_image_base:latest" "${amend_args[@]}" --insecure
            docker manifest push "$target_image_base:latest"

            echo "✅ 同步完成: $target_image_base:latest"
            echo "────────────────────────────────────────"
          done < image-list.txt
